{"dependencies":[{"name":"/Users/cody/Dev/github/atom-next/tsconfig.json","includedInParent":true,"mtime":1518197409000},{"name":"./atom","loc":{"line":3,"column":23}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst atom_1 = require(\"./atom\");\nconst seed = new atom_1.AtomValue(1, 'seed');\nconst b = new atom_1.AtomCalc(() => {\n    return seed.get() + 10;\n}, 'b');\nconst c = new atom_1.AtomCalc(() => {\n    return 5 + b.get();\n}, 'c');\nconst d = new atom_1.AtomCalc(() => {\n    return c.get();\n}, 'd');\nconst y = new atom_1.AtomCalc(() => {\n    return new atom_1.AtomValue(103);\n});\n// const x = AtomCalc.autorun(() => {\n//     var xx = new AtomValue(103, 'inner');\n//     xx.get();\n//     xx.set(100);\n//     run();\n//     debugger;\n// }, 'outer');\n// const e = new AtomCalc(() => {\n//     return b.get();\n// }, 'e');\nvar autorun = atom_1.AtomCalc.autorun(() => {\n    return d.get();\n}, 'autorun');\n// declare const global: any;\n// global.seed = seed;\n// global.b = b;\n// global.c = c;\n// global.d = d;\nconsole.log(d.get());\nseed.set(2);\nseed.set(3);\n// // console.log(seed.slaves[0]);\n// // console.log(c);\n// // d.get();\n// // console.log(d.get());\n// // console.log(autorun);\natom_1.run();\n","map":{"version":3,"file":"tests2.js","sourceRoot":"","sources":["tests2.ts"],"names":[],"mappings":";;AAAA,iCAAwD;AAExD,MAAM,IAAI,GAAG,IAAI,gBAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACtC,MAAM,CAAC,GAAG,IAAI,eAAQ,CAAC,GAAG,EAAE;IACxB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;AAC3B,CAAC,EAAE,GAAG,CAAC,CAAC;AACR,MAAM,CAAC,GAAG,IAAI,eAAQ,CAAC,GAAG,EAAE;IACxB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;AACvB,CAAC,EAAE,GAAG,CAAC,CAAC;AACR,MAAM,CAAC,GAAG,IAAI,eAAQ,CAAC,GAAG,EAAE;IACxB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AACnB,CAAC,EAAE,GAAG,CAAC,CAAC;AAER,MAAM,CAAC,GAAG,IAAI,eAAQ,CAAC,GAAG,EAAE;IACxB,MAAM,CAAC,IAAI,gBAAS,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AACH,qCAAqC;AACrC,4CAA4C;AAC5C,gBAAgB;AAChB,mBAAmB;AACnB,aAAa;AACb,gBAAgB;AAChB,eAAe;AAEf,iCAAiC;AACjC,sBAAsB;AACtB,WAAW;AAEX,IAAI,OAAO,GAAG,eAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;IAChC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AACnB,CAAC,EAAE,SAAS,CAAC,CAAC;AAEd,6BAA6B;AAC7B,sBAAsB;AACtB,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAEhB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AACrB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACZ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEZ,kCAAkC;AAClC,qBAAqB;AAErB,cAAc;AACd,2BAA2B;AAC3B,2BAA2B;AAC3B,UAAG,EAAE,CAAC","sourcesContent":["import { Atom, run, AtomValue, AtomCalc } from './atom';\n\nconst seed = new AtomValue(1, 'seed');\nconst b = new AtomCalc(() => {\n    return seed.get() + 10;\n}, 'b');\nconst c = new AtomCalc(() => {\n    return 5 + b.get();\n}, 'c');\nconst d = new AtomCalc(() => {\n    return c.get();\n}, 'd');\n\nconst y = new AtomCalc(() => {\n    return new AtomValue(103);\n});\n// const x = AtomCalc.autorun(() => {\n//     var xx = new AtomValue(103, 'inner');\n//     xx.get();\n//     xx.set(100);\n//     run();\n//     debugger;\n// }, 'outer');\n\n// const e = new AtomCalc(() => {\n//     return b.get();\n// }, 'e');\n\nvar autorun = AtomCalc.autorun(() => {\n    return d.get();\n}, 'autorun');\n\n// declare const global: any;\n// global.seed = seed;\n// global.b = b;\n// global.c = c;\n// global.d = d;\n\nconsole.log(d.get());\nseed.set(2);\nseed.set(3);\n\n// // console.log(seed.slaves[0]);\n// // console.log(c);\n\n// // d.get();\n// // console.log(d.get());\n// // console.log(autorun);\nrun();\n"]}},"hash":"da4482c6cd811035d94c6a148c7dff5d","cacheData":{"env":{}}}